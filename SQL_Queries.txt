-- 2. Create Database and Tables
CREATE DATABASE EmployeeManagementDB;
USE EmployeeManagementDB;

-- Create Employees Table
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY IDENTITY(1,1),
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    DateOfBirth DATE,
    Email VARCHAR(100) UNIQUE,
    PhoneNumber VARCHAR(15),
    Address VARCHAR(255),
    Department VARCHAR(50),
    HireDate DATE,
    Salary DECIMAL(10,2)
);

-- Insert Sample Data
INSERT INTO Employees (FirstName, LastName, DateOfBirth, Email, PhoneNumber, Address, Department, HireDate, Salary)
VALUES ('John', 'Doe', '1985-07-12', 'john.doe@email.com', '9876543210', '123 Street, NY', 'IT', '2022-01-15', 75000);

INSERT INTO Employees (FirstName, LastName, DateOfBirth, Email, PhoneNumber, Address, Department, HireDate, Salary) VALUES
('Alice', 'Johnson', '1992-08-15', 'alice.johnson@email.com', '1234567890', '567 Oak St, Denver', 'Marketing', '2023-09-20', 62000),
('Bob', 'Williams', '1988-04-22', 'bob.williams@email.com', '9876543211', '789 Pine Ave, Seattle', 'Finance', '2022-06-10', 78000),
('Charlie', 'Brown', '1997-12-03', 'charlie.brown@email.com', '5551234567', '101 Maple Dr, Austin', 'IT', '2024-01-05', 70000);

c
-- Update Employee Data
UPDATE Employees SET Email = 'john.doe123@email.com' WHERE EmployeeID = 1;

-- Select Data
SELECT * FROM Employees;

-- Delete Employee Record
DELETE FROM Employees WHERE EmployeeID = 1;

-- 3. Find Second Highest Salary
SELECT MAX(Salary) AS SecondHighestSalary FROM Employees WHERE Salary < (SELECT MAX(Salary) FROM Employees);

-- 4. List Employee Count Per Department
SELECT Department, COUNT(*) AS EmployeeCount FROM Employees GROUP BY Department;

-- 5. Create Two Tables and Implement SQL Joins
CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY IDENTITY(1,1),
    DepartmentName VARCHAR(100)
);

CREATE TABLE EmployeeDetails (
    DetailID INT PRIMARY KEY IDENTITY(1,1),
    EmployeeID INT,
    DepartmentID INT,
    JobTitle VARCHAR(100),
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);

-- Implementing Joins
SELECT Employees.FirstName, Employees.LastName, Departments.DepartmentName
FROM Employees
INNER JOIN EmployeeDetails ON Employees.EmployeeID = EmployeeDetails.EmployeeID
INNER JOIN Departments ON EmployeeDetails.DepartmentID = Departments.DepartmentID;

-- 6. Combine Fields Using Primary and Foreign Keys (Handled in EmployeeDetails Table)

-- 7. CRUD Operations Using Different Stored Procedures
CREATE PROCEDURE InsertEmployee
    @FirstName VARCHAR(50), @LastName VARCHAR(50), @DateOfBirth DATE, @Email VARCHAR(100),
    @PhoneNumber VARCHAR(15), @Address VARCHAR(255), @Department VARCHAR(50), @HireDate DATE, @Salary DECIMAL(10,2)
AS
BEGIN
    INSERT INTO Employees (FirstName, LastName, DateOfBirth, Email, PhoneNumber, Address, Department, HireDate, Salary)
    VALUES (@FirstName, @LastName, @DateOfBirth, @Email, @PhoneNumber, @Address, @Department, @HireDate, @Salary);
END;

CREATE PROCEDURE UpdateEmployee
    @EmployeeID INT, @Email VARCHAR(100), @PhoneNumber VARCHAR(15), @Address VARCHAR(255), @Salary DECIMAL(10,2)
AS
BEGIN
    UPDATE Employees SET Email = @Email, PhoneNumber = @PhoneNumber, Address = @Address, Salary = @Salary WHERE EmployeeID = @EmployeeID;
END;

CREATE PROCEDURE DeleteEmployee
    @EmployeeID INT
AS
BEGIN
    DELETE FROM Employees WHERE EmployeeID = @EmployeeID;
END;

-- 8. CRUD Operations Using a Single Stored Procedure
CREATE PROCEDURE ManageEmployee
    @Operation VARCHAR(10), @EmployeeID INT = NULL, @FirstName VARCHAR(50) = NULL, @LastName VARCHAR(50) = NULL,
    @DateOfBirth DATE = NULL, @Email VARCHAR(100) = NULL, @PhoneNumber VARCHAR(15) = NULL, @Address VARCHAR(255) = NULL,
    @Department VARCHAR(50) = NULL, @HireDate DATE = NULL, @Salary DECIMAL(10,2) = NULL
AS
BEGIN
    IF @Operation = 'INSERT'
    BEGIN
        INSERT INTO Employees (FirstName, LastName, DateOfBirth, Email, PhoneNumber, Address, Department, HireDate, Salary)
        VALUES (@FirstName, @LastName, @DateOfBirth, @Email, @PhoneNumber, @Address, @Department, @HireDate, @Salary);
    END
    ELSE IF @Operation = 'UPDATE'
    BEGIN
        UPDATE Employees
        SET FirstName = @FirstName, LastName = @LastName, DateOfBirth = @DateOfBirth, Email = @Email, 
            PhoneNumber = @PhoneNumber, Address = @Address, Department = @Department, HireDate = @HireDate, Salary = @Salary
        WHERE EmployeeID = @EmployeeID;
    END
    ELSE IF @Operation = 'DELETE'
    BEGIN
        DELETE FROM Employees WHERE EmployeeID = @EmployeeID;
    END
    ELSE IF @Operation = 'SELECT'
    BEGIN
        SELECT * FROM Employees WHERE EmployeeID = @EmployeeID;
    END
END;
